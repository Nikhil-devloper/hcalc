import React, { useEffect, useState, useContext } from 'react'
//import ExpandCollapse from '../ExpandCollapse/ExpandCollapse.jsx';
//import './BMICalc.css'
import cross from '../../images/cross.png';
import bmimage from '../../images/pp.png';
import { AnimatePresence, motion } from 'framer-motion';
import cmArray from './cmObj';
import upArrow from '../../images/up-arrow.png';
import { PageContext } from '../../PageContextProvider';
import LocalizedStrings from 'react-localization';
import { withRouter } from 'react-router-dom';
import Lazy from './Lazy.js';


const backdrop = {
    visible: { opacity: 1 },
    hidden: { opacity: 0 },
}

const modal = {
    hidden: { y: "-100vh", opacity: 0 },
    visible: {
        y: "0vh",
        opacity: 1,
        transition: { delay: 0.5 }
    },
}

let strings = new LocalizedStrings({
    en: {
        bmiCalc: "BMI calculator",
        age: "AGE (17-99)",
        height: "HEIGHT (Cm) [148 - 213]",
        weight: "WEIGHT (Kg)",
        whatbmi: "What is BMI Calculator ?",
        bmiAnswer: "The BMI is a convenient rule of thumb used to broadly categorize a person as underweight, normal weight, overweight, or obese based on tissue mass (muscle, fat, and bone) and height. Commonly accepted BMI ranges are underweight (under 18.5 kg/m2), normal weight (18.5 to 25), overweight (25 to 30), and obese (over 30)",
        yourBmi: "YOUR BMI",
        bmi: "bmi",
        Overweight: "Overweight",
        Underweight: "Underweight",
        Normal: "Normal",
        heaweight: "Healthy weight for your height:",
        healthyBMI: "Healthy BMI range:",
        Calculate: "Calculate",
        back: "Back",
        share: "Share"

        // glassOfwater: "Glass of Water you should Drink"
    },
    marathi: {
        bmiCalc: "‡§¨‡•Ä‡§è‡§Æ‡§Ü‡§Ø ‡§ï‡•Ö‡§≤‡•ç‡§ï‡•ç‡§Ø‡•Å‡§≤‡•á‡§ü‡§∞",
        age: "‡§µ‡§Ø (17-99)",
        height: " ‡§â‡§Ç‡§ö‡•Ä (‡§∏‡•á‡§Æ‡•Ä) [148 - 213]",
        weight: "‡§µ‡§ú‡§® (‡§ï‡§ø‡§≤‡•ã‡§ó‡•ç‡§∞‡§æ‡§Æ)",
        whatbmi: "‡§¨‡•Ä‡§è‡§Æ‡§Ü‡§Ø ‡§ï‡•Ö‡§≤‡•ç‡§ï‡•ç‡§Ø‡•Å‡§≤‡•á‡§ü‡§∞ ‡§Æ‡•ç‡§π‡§£‡§ú‡•á ‡§ï‡§æ‡§Ø ?",
        bmiAnswer: "‡§¨‡•Ä‡§è‡§Æ‡§Ü‡§Ø ‡§π‡§æ ‡§è‡§ï ‡§•‡§Ç‡§¨ ‡§π‡§æ ‡§è‡§ï ‡§∏‡•ã‡§Ø‡•Ä‡§ö‡§æ ‡§®‡§ø‡§Ø‡§Æ ‡§Ü‡§π‡•á ‡§ú‡•ã ‡§è‡§ñ‡§æ‡§¶‡•ç‡§Ø‡§æ ‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡•Ä‡§ö‡•á ‡§µ‡§ú‡§® ‡§ï‡§Æ‡•Ä, ‡§∏‡§æ‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§µ‡§ú‡§®, ‡§ú‡§æ‡§∏‡•ç‡§§ ‡§µ‡§ú‡§® ‡§ï‡§ø‡§Ç‡§µ‡§æ ‡§ä‡§§‡§ï‡§æ‡§Ç‡§ö‡•ç‡§Ø‡§æ ‡§Æ‡§æ‡§∏ (‡§∏‡•ç‡§®‡§æ‡§Ø‡•Ç, ‡§ö‡§∞‡§¨‡•Ä ‡§Ü‡§£‡§ø ‡§π‡§æ‡§°‡•á) ‡§Ü‡§£‡§ø ‡§â‡§Ç‡§ö‡•Ä‡§µ‡§∞ ‡§Ü‡§ß‡§æ‡§∞‡§ø‡§§ ‡§≤‡§†‡•ç‡§†‡§™‡§£‡§æ‡§ö‡•á ‡§µ‡§ø‡§∏‡•ç‡§§‡•É‡§§‡§™‡§£‡•á ‡§µ‡§∞‡•ç‡§ó‡•Ä‡§ï‡§∞‡§£ ‡§ï‡§∞‡§£‡•ç‡§Ø‡§æ‡§∏‡§æ‡§†‡•Ä ‡§µ‡§æ‡§™‡§∞‡§≤‡§æ ‡§ú‡§æ‡§§‡•ã. ‡§∏‡§æ‡§Æ‡§æ‡§®‡•ç‡§Ø‡§™‡§£‡•á ‡§∏‡•ç‡§µ‡•Ä‡§ï‡§æ‡§∞‡§≤‡•ç‡§Ø‡§æ ‡§ó‡•á‡§≤‡•á‡§≤‡•ç‡§Ø‡§æ ‡§¨‡•Ä‡§è‡§Æ‡§Ü‡§Ø ‡§∂‡•ç‡§∞‡•á‡§£‡•Ä‡§Ç‡§ö‡•á ‡§µ‡§ú‡§® ‡§ï‡§Æ‡•Ä (18.5 ‡§ï‡§ø‡§≤‡•ã / ‡§è‡§Æ 2 ‡§™‡•á‡§ï‡•ç‡§∑‡§æ ‡§ï‡§Æ‡•Ä), ‡§∏‡§æ‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§µ‡§ú‡§® (18.5 ‡§§‡•á 25), ‡§ú‡§æ‡§¶‡§æ ‡§µ‡§ú‡§® (25 ‡§§‡•á 30) ‡§Ü‡§£‡§ø ‡§≤‡§†‡•ç‡§†‡§™‡§£‡§æ (30 ‡§™‡•á‡§ï‡•ç‡§∑‡§æ ‡§ú‡§æ‡§∏‡•ç‡§§) ‡§Ü‡§π‡•á.",
        yourBmi: "‡§Ü‡§™‡§≤‡§æ ‡§¨‡•Ä‡§è‡§Æ‡§Ü‡§Ø",
        bmi: "‡§¨‡•Ä‡§è‡§Æ‡§Ü‡§Ø",
        Overweight: "‡§ú‡§æ‡§∏‡•ç‡§§ ‡§µ‡§ú‡§®",
        Underweight: "‡§ï‡§Æ‡•Ä ‡§µ‡§ú‡§®",
        Normal: "‡§∏‡§æ‡§Æ‡§æ‡§®‡•ç‡§Ø",
        heaweight: "‡§Ü‡§™‡§≤‡•ç‡§Ø‡§æ ‡§â‡§Ç‡§ö‡•Ä‡§∏‡§æ‡§†‡•Ä ‡§®‡§ø‡§∞‡•ã‡§ó‡•Ä ‡§µ‡§ú‡§®",
        healthyBMI: "‡§∏‡•ç‡§µ‡§∏‡•ç‡§• ‡§¨‡•Ä‡§è‡§Æ‡§Ü‡§Ø ‡§∂‡•ç‡§∞‡•á‡§£‡•Ä:",
        Calculate: "‡§ó‡§£‡§®‡§æ ‡§ï‡§∞‡§æ",
        back: "‡§Æ‡§æ‡§ó‡•á",
        share: "‡§∏‡§æ‡§Æ‡§æ‡§Ø‡§ø‡§ï ‡§ï‡§∞‡§æ"
    }
});



const containerVariants = {
    hidden: {
        opacity: 0,
        x: '-100vh',
        transition: { type: 'spring', delay: 0.2 }
    },
    visible: {
        opacity: 1,
        x: 0,
        transition: { type: 'spring', delay: 0.2 }
    },
    exit: {
        x: "-100vh",
        transition: { ease: 'easeInOut', delay: 0.2 }
    }
};




function BMICalc(props) {

    const [age, setAge] = useState('');
    const [ageError, setAgeError] = useState('');
    const [height, setHeight] = useState('');
    const [weight, setWeight] = useState('');
    const [mode, setMode] = useState('Q')
    const [bmiResult, setBmiResult] = useState(null);
    const [cat, setCat] = useState(null);
    const [lweight, setLooseWeight] = useState(0);
    const [gweight, setGainWeight] = useState(0);
    const [calcBtn, setCalcBtn] = useState(true);
    const [lazyPop, showLazyPopup] = useState(false);

    const [healthyWeight, setHealthyWeight] = useState(null);


    function bmiFun(weight, height) {

        weight = parseFloat(weight);
        height = parseFloat(height);

        let bmi = weight / ((height / 100) ** 2);


        let cat = '';
        if (bmi < 18.5) {
            cat = { cat: "Underweight", emo: 'üòí', display: strings.Underweight };
        } else if (bmi < 25) {
            cat = { cat: "Normal", emo: 'üòã', display: strings.Normal };
        } else if (bmi < 30) {
            cat = { cat: "Overweight", emo: 'üòÖ', display: strings.Overweight };
        } else {
            cat = { cat: 'Obesity', emo: 'üò±üò°' };
        }

        if (cat.cat != 'Normal') {
            //Formula to calc weight.
            if (cat.cat == 'Overweight' || cat.cat == 'Obesity') {
                let looseWeight = 25 * ((height / 100) ** 2)
                setLooseWeight((weight - looseWeight).toFixed(1))
                setGainWeight(0);
            }
            else if (cat.cat == 'Underweight') {
                let gainWeight = 18.5 * ((height / 100) ** 2);
                setLooseWeight(0)
                setGainWeight((gainWeight - weight).toFixed(1))
            }
        }

        let roundedHeight = Math.floor(height);
        for (let i = 0; i < cmArray.length; i++) {
            if (Number.parseInt(cmArray[i].cm) >= Number.parseInt(roundedHeight)) {
                setHealthyWeight(cmArray[i].kg.split('-'))
                break;
            }
        }
        setCat(cat)
        return bmi.toFixed(2);
    }

    function handleCalClick() {

        if (mode == 'A') {
            setMode('Q')
        }
        else {

            localStorage.setItem('weight', weight)
            localStorage.setItem('height', height);
            localStorage.setItem('age', age);

            setBmiResult(bmiFun(weight, height))
            setMode('A')

        }
    }

    useEffect(() => {

        setHeight(localStorage.getItem('height') ? localStorage.getItem('height') : '');
        setWeight(localStorage.getItem('weight') ? localStorage.getItem('weight') : '');
        setAge(localStorage.getItem('age') ? localStorage.getItem('age') : '');

    }, []);



    let isDisableCalcBtn = age != '' && height != '' && weight != '' ? false : true
    if (mode == 'A') {
        isDisableCalcBtn = false
    }
    let percentage = (bmiResult / 50) * 100;

    const lazyPopup = () => {
        showLazyPopup(true);
    }



    const { user, language, setLanguage } = useContext(PageContext);
    strings.setLanguage(language);


    return (
        <AnimatePresence>

            <motion.div className="backdrop"
                variants={backdrop}
                initial="hidden"
                animate="visible"
                exit="hidden"
            >
                <motion.div
                    className={"modal"}
                    //type.name == 'SEC' ? "modal bmr-parent" : 
                    variants={modal}
                >


                    <div className='bmi-calc-container'>

                        <div className='heading'>
                            {/* BMI Calculator */}
                            {strings.bmiCalc}
                        </div>
                        <img src={cross} alt='cross' className='cross-icon'
                            onClick={() => {
                                console.log('props --> ', props);
                                //props.setModal(false)
                                //props.history.push('/')
                                props.history.push('/')
                            }
                            }
                        />

                        <div className='actual-cal'>

                            <AnimatePresence >
                                {mode == 'Q' && <motion.div
                                    variants={containerVariants}
                                    initial="hidden"
                                    animate="visible"
                                    exit="exit"
                                    className='form-container'>

                                    <div className="contact-us">

                                        <form action="#">


                                            {/* <p>Please select your gender:</p>
                             <input type="radio" id="male" name="gender" value="male" />
                            <label for="male">Male</label><br /> */}
                                            {/*<input type="radio" id="female" name="gender" value="female" />
                            <label for="female">Female</label><br />
                            <input type="radio" id="other" name="gender" value="other" /> */}


                                            {/* <input id="customerName" name="customerName" required="" type="number" /> */}

                                            <label for="customerName">
                                                {strings.age}

                                                {/* AGE &nbsp;&nbsp;(17-99) <em>&#x2a;</em>*/}
                                            </label>
                                            <input
                                                id="age"
                                                name="age"
                                                required=""
                                                type="number"
                                                value={age}
                                                onChange={(e) => {
                                                    if (e.target.value.length < 3) {
                                                        setAge(e.target.value)
                                                    }
                                                }}
                                            />
                                            <div>

                                            </div>

                                            <label for="height" type="number">
                                                {/* HEIGHT (Cm) [148 - 213] */}
                                                {strings.height}
                                                <em>&#x2a;</em></label>
                                            <input id="height" name="height" required="" type="number"
                                                onChange={(e) => setHeight(e.target.value)}
                                                value={height}
                                            />

                                            <label for="customerPhone">
                                                {/* WEIGHT (Kg) */}
                                                {strings.weight}
                                                <em>&#x2a;</em></label>
                                            <input id="customerPhone"
                                                onChange={(e) => setWeight(e.target.value)}
                                                //name="customerPhone"
                                                type="number"
                                                value={weight}
                                            // pattern="[0-9]{3}-[0-9]{3}-[0-9]{4}"
                                            //type="tel"
                                            />

                                            {/* <label for="orderNumber">ORDER NUMBER</label>
                            <input id="orderNumber" name="orderNumber" type="text" /> */}
                                            {/* <label for="customerNote">YOUR MESSAGE <em>&#x2a;</em></label>
        <textarea id="customerNote" name="customerNote" required="" rows="4">
        </textarea> */}
                                        </form>
                                    </div>

                                    {calcBtn && <div className={isDisableCalcBtn ? 'calulate disable' : 'calulate'} onClick={handleCalClick}>
                                        {mode == 'A' ? strings.back : strings.Calculate}
                                    </div>}

                                    {/* <div className='q-container'>
                                        <ExpandCollapse
                                            type='faq'
                                            // /
                                            displayText={strings.whatbmi}
                                            //displayText={'What is BMI Calculator ?'}
                                            currentState={(currenState) => { setCalcBtn(!currenState) }}
                                        >
                                            <div className='answer'>
                                                {strings.bmiAnswer}                                                
                                            </div>
                                        </ExpandCollapse>
                                    </div> */}

                                </motion.div>
                                }
                            </AnimatePresence>

                            <AnimatePresence >
                                {mode == 'A' && <motion.div
                                    variants={containerVariants}
                                    initial="hidden"
                                    animate="visible"
                                    exit="exit"

                                >

                                    <div className='bmi-result-container'>

                                        <div> {strings.yourBmi}  </div>

                                        <div> {strings.bmi} = <span className='no-cal'> {bmiResult} Kg/m<sup>2</sup> </span>  ({cat && `${cat.display}`}) </div>

                                        <div> {cat.emo} </div>

                                        <span className='bmi-img-container' >
                                            <img src={bmimage} alt='bmi-image' />

                                            {bmiResult && bmiResult < 40 && <div className='up-weight-arrow' style={{ left: `${percentage - 12}%` }}>
                                                {/*  ${}*/}
                                                <img src={upArrow} alt='upArrow' />
                                            </div>}

                                            <div className='min0'>
                                                0
                                </div>
                                            <div className='max40'>
                                                40
                                </div>
                                        </span>


                                        <div className='flex-table'>


                                            {cat && (cat.cat == 'Overweight' || cat.cat == 'Obesity') ?
                                                <div className='flex-row' style={{ lineHeight: 1, marginBottom: '15px', fontSize: '21px', marginTop: '16px', marginBottom: '5px', padding: '10px' }}>
                                                    {language == 'en' && <>Lose &nbsp; <span className='no-cal'> {lweight} Kgs</span> &nbsp;  to reach a BMI of &nbsp; <span className='no-cal'>25 Kg/m<sup>2</sup></span></>}
                                                    {language == 'marathi' && <> <span className='no-cal'>&nbsp;25 Kg/m<sup>2</sup></span> &nbsp; ‡§ö‡•ç‡§Ø‡§æ ‡§¨‡•Ä‡§è‡§Æ‡§Ü‡§Ø‡§µ‡§∞ ‡§™‡•ã‡§π‡•ã‡§ö‡§£‡•ç‡§Ø‡§æ‡§∏‡§æ‡§†‡•Ä &nbsp; <span className='no-cal'> {lweight} Kgs</span> ‡§µ‡§ú‡§® ‡§ï‡§Æ‡•Ä ‡§ï‡§∞‡§æ </>}
                                                </div>
                                                :
                                                cat && cat.cat == 'Underweight' ?
                                                    <>
                                                        {language == 'en' && <> <div style={{ lineHeight: 1, fontSize: '21px', marginTop: '16px' }}> Gain {gweight} Kgs to reach a BMI of &nbsp; <span className='no-cal'> 18.5 Kg/m<sup>2</sup> </span>  </div> </>}
                                                        {language == 'marathi' && <> <span className='no-cal'> 18.5 Kg/m<sup>2</sup> </span> &nbsp; ‡§ö‡•ç‡§Ø‡§æ ‡§¨‡•Ä‡§è‡§Æ‡§Ü‡§Ø‡§µ‡§∞ ‡§™‡•ã‡§π‡•ã‡§ö‡§£‡•ç‡§Ø‡§æ‡§∏‡§æ‡§†‡•Ä &nbsp; <span className='no-cal'> {gweight} Kgs</span> ‡§µ‡§ú‡§® ‡§µ‡§æ‡§¢‡§µ‡§æ </>}
                                                    </>
                                                    : null}

                                            {cat && (cat.cat == 'Normal') ? <div style={{ marginBottom: '15px' }} > </div> : null}


                                            <div className='flex-row' style={{ marginTop: '20px' }}>
                                                {healthyWeight && <> <div className='col1' style={{ lineHeight: 1, marginBottom: '15px', fontSize: '21px', alignSelf: 'center' }}> {strings.heaweight} </div>
                                                    <div className='col2' style={{ fontSize: '19px' }}> <span className='no-cal'> {healthyWeight[0]} Kgs - {healthyWeight[1]} Kgs  </span> </div>
                                                </>}
                                            </div>

                                            <div className='flex-row'>
                                                <div className='col1' style={{ lineHeight: 1, marginBottom: '15px', fontSize: '19px', alignSelf: 'center' }}> {strings.healthyBMI} </div>
                                                <div className='col2'> <div className='no-cal' style={{ fontSize: '21px', alignSelf: 'center', lineHeight: '1' }}> 18.5 Kg/m2 - 25 Kg/m<sup>2</sup> </div> </div>
                                            </div>

                                            <div className='flex-row btn-containers'>

                                                {
                                                    calcBtn && <div style={{ marginTop: '20px' }} className={isDisableCalcBtn ? 'calulate disable' : 'calulate'} onClick={handleCalClick}>
                                                        {mode == 'A' ? strings.back : strings.Calculate}
                                                    </div>
                                                }

                                                {
                                                    <div
                                                        style={{ marginTop: '20px' }}
                                                        className={isDisableCalcBtn ? 'calulate disable' : 'calulate'}
                                                        onClick={lazyPopup}
                                                    >
                                                        {strings.share}
                                                    </div>
                                                }


                                            </div>


                                        </div>




                                    </div>

                                </motion.div>
                                }
                            </AnimatePresence>

                        </div>

                    </div>

                    <AnimatePresence>

                        {lazyPop && <Lazy showLazyPopup={(bool) => { showLazyPopup(bool) }} />}
                    </AnimatePresence>

                </motion.div>
            </motion.div>
        </AnimatePresence>

    )
}

export default withRouter(BMICalc);
